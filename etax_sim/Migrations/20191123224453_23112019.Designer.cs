// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTaxSim.Models;

namespace eTaxSim.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191123224453_23112019")]
    partial class _23112019
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("etax_sim.Models.CalcTableIRS_PT", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.HasKey("mId");

                    b.ToTable("__CALC_IRS_PT__");
                });

            modelBuilder.Entity("etax_sim.Models.Company", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("mCreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("mDescription")
                        .HasColumnName("Description");

                    b.Property<bool>("mIsActive")
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("mModifiedAt")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("mName")
                        .HasColumnName("Name");

                    b.Property<int>("mRegionId")
                        .HasColumnName("RegionId");

                    b.Property<int>("mSectorId")
                        .HasColumnName("SectorId");

                    b.HasKey("mId");

                    b.HasIndex("mRegionId");

                    b.HasIndex("mSectorId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("etax_sim.Models.Country", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("mCreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("mDescription")
                        .HasColumnName("Description");

                    b.Property<bool>("mIsActive")
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("mModifiedAt")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("mName")
                        .HasColumnName("Name");

                    b.HasKey("mId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("etax_sim.Models.Region", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("mCountryId")
                        .HasColumnName("CountryId");

                    b.Property<DateTime>("mCreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("mDescription")
                        .HasColumnName("Description");

                    b.Property<bool>("mIsActive")
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("mModifiedAt")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("mName")
                        .HasColumnName("Name");

                    b.HasKey("mId");

                    b.HasIndex("mCountryId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("etax_sim.Models.Role", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("mCompanyId")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("mCreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("mDescription")
                        .HasColumnName("Description");

                    b.Property<bool>("mIsActive")
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("mModifiedAt")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("mName")
                        .HasColumnName("Name");

                    b.HasKey("mId");

                    b.HasIndex("mCompanyId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("etax_sim.Models.Sector", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("mCreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("mDescription")
                        .HasColumnName("Description");

                    b.Property<bool>("mIsActive")
                        .HasColumnName("IsActive");

                    b.Property<DateTime>("mModifiedAt")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("mName")
                        .HasColumnName("Name");

                    b.HasKey("mId");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("etax_sim.Models.SimulationLog", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("mCreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("mModifiedAt")
                        .HasColumnName("ModifiedAt");

                    b.Property<int>("mRegionId")
                        .HasColumnName("RegionId");

                    b.Property<int>("mRoleId")
                        .HasColumnName("RoleId");

                    b.HasKey("mId");

                    b.HasIndex("mRegionId");

                    b.HasIndex("mRoleId");

                    b.ToTable("SimulationLog");
                });

            modelBuilder.Entity("etax_sim.Models.SimulationLogParam", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("mCreatedAt")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("mIsInput")
                        .HasColumnName("IsInput");

                    b.Property<DateTime>("mModifiedAt")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("mParamName")
                        .HasColumnName("ParamName");

                    b.Property<string>("mParamValue")
                        .HasColumnName("ParamValue");

                    b.Property<int>("mSimulationLogId")
                        .HasColumnName("SimulationLogId");

                    b.HasKey("mId");

                    b.HasIndex("mSimulationLogId");

                    b.ToTable("SimulationLogParam");
                });

            modelBuilder.Entity("etax_sim.Models.SimulationParamRule", b =>
                {
                    b.Property<int>("mId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("mMax")
                        .HasColumnName("Max");

                    b.Property<int>("mMin")
                        .HasColumnName("Min");

                    b.Property<string>("mParamName")
                        .HasColumnName("ParamName");

                    b.HasKey("mId");

                    b.ToTable("SimulationParamRule");
                });

            modelBuilder.Entity("etax_sim.Models.Company", b =>
                {
                    b.HasOne("etax_sim.Models.Region", "mRegion")
                        .WithMany("mCompanies")
                        .HasForeignKey("mRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("etax_sim.Models.Sector", "mSector")
                        .WithMany("mCompanies")
                        .HasForeignKey("mSectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("etax_sim.Models.Region", b =>
                {
                    b.HasOne("etax_sim.Models.Country", "mCountry")
                        .WithMany("mRegions")
                        .HasForeignKey("mCountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("etax_sim.Models.Role", b =>
                {
                    b.HasOne("etax_sim.Models.Company", "mCompany")
                        .WithMany("mRoles")
                        .HasForeignKey("mCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("etax_sim.Models.SimulationLog", b =>
                {
                    b.HasOne("etax_sim.Models.Region", "mRegion")
                        .WithMany()
                        .HasForeignKey("mRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("etax_sim.Models.Role", "mRole")
                        .WithMany()
                        .HasForeignKey("mRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("etax_sim.Models.SimulationLogParam", b =>
                {
                    b.HasOne("etax_sim.Models.SimulationLog", "mSimulationLog")
                        .WithMany("mParams")
                        .HasForeignKey("mSimulationLogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
